// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "carousell-challenge": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/Coding24x7/carousell-challenge/design
// --out=$(GOPATH)/src/github.com/Coding24x7/carousell-challenge
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"unicode/utf8"
)

// PostTopicContext provides the topic post action context.
type PostTopicContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *PostTopicPayload
}

// NewPostTopicContext parses the incoming request URL and body, performs validations and creates the
// context used by the topic controller post action.
func NewPostTopicContext(ctx context.Context, r *http.Request, service *goa.Service) (*PostTopicContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PostTopicContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// postTopicPayload is the topic post action payload.
type postTopicPayload struct {
	// Content of the topic
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// Author of this topic
	UserName *string `form:"userName,omitempty" json:"userName,omitempty" xml:"userName,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *postTopicPayload) Validate() (err error) {
	if payload.Content == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "content"))
	}
	if payload.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "userName"))
	}
	if payload.Content != nil {
		if utf8.RuneCountInString(*payload.Content) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.content`, *payload.Content, utf8.RuneCountInString(*payload.Content), 255, false))
		}
	}
	return
}

// Publicize creates PostTopicPayload from postTopicPayload
func (payload *postTopicPayload) Publicize() *PostTopicPayload {
	var pub PostTopicPayload
	if payload.Content != nil {
		pub.Content = *payload.Content
	}
	if payload.UserName != nil {
		pub.UserName = *payload.UserName
	}
	return &pub
}

// PostTopicPayload is the topic post action payload.
type PostTopicPayload struct {
	// Content of the topic
	Content string `form:"content" json:"content" xml:"content"`
	// Author of this topic
	UserName string `form:"userName" json:"userName" xml:"userName"`
}

// Validate runs the validation rules defined in the design.
func (payload *PostTopicPayload) Validate() (err error) {
	if payload.Content == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "content"))
	}
	if payload.UserName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "userName"))
	}
	if utf8.RuneCountInString(payload.Content) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.content`, payload.Content, utf8.RuneCountInString(payload.Content), 255, false))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *PostTopicContext) OK(r interface{}) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PostTopicContext) BadRequest(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *PostTopicContext) Unauthorized(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *PostTopicContext) NotFound(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *PostTopicContext) InternalServerError(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowTopicContext provides the topic show action context.
type ShowTopicContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowTopicContext parses the incoming request URL and body, performs validations and creates the
// context used by the topic controller show action.
func NewShowTopicContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowTopicContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowTopicContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowTopicContext) OK(r interface{}) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowTopicContext) BadRequest(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowTopicContext) Unauthorized(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowTopicContext) NotFound(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowTopicContext) InternalServerError(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// VoteTopicContext provides the topic vote action context.
type VoteTopicContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TopicID string
	Payload *VoteTopicPayload
}

// NewVoteTopicContext parses the incoming request URL and body, performs validations and creates the
// context used by the topic controller vote action.
func NewVoteTopicContext(ctx context.Context, r *http.Request, service *goa.Service) (*VoteTopicContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := VoteTopicContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTopicID := req.Params["topicID"]
	if len(paramTopicID) > 0 {
		rawTopicID := paramTopicID[0]
		rctx.TopicID = rawTopicID
	}
	return &rctx, err
}

// voteTopicPayload is the topic vote action payload.
type voteTopicPayload struct {
	// username
	UserName *string `form:"userName,omitempty" json:"userName,omitempty" xml:"userName,omitempty"`
	// upvote/downvote topic
	Vote *string `form:"vote,omitempty" json:"vote,omitempty" xml:"vote,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *voteTopicPayload) Validate() (err error) {
	if payload.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "userName"))
	}
	if payload.Vote == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "vote"))
	}
	if payload.Vote != nil {
		if !(*payload.Vote == "up" || *payload.Vote == "down") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`raw.vote`, *payload.Vote, []interface{}{"up", "down"}))
		}
	}
	return
}

// Publicize creates VoteTopicPayload from voteTopicPayload
func (payload *voteTopicPayload) Publicize() *VoteTopicPayload {
	var pub VoteTopicPayload
	if payload.UserName != nil {
		pub.UserName = *payload.UserName
	}
	if payload.Vote != nil {
		pub.Vote = *payload.Vote
	}
	return &pub
}

// VoteTopicPayload is the topic vote action payload.
type VoteTopicPayload struct {
	// username
	UserName string `form:"userName" json:"userName" xml:"userName"`
	// upvote/downvote topic
	Vote string `form:"vote" json:"vote" xml:"vote"`
}

// Validate runs the validation rules defined in the design.
func (payload *VoteTopicPayload) Validate() (err error) {
	if payload.UserName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "userName"))
	}
	if payload.Vote == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "vote"))
	}
	if !(payload.Vote == "up" || payload.Vote == "down") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`raw.vote`, payload.Vote, []interface{}{"up", "down"}))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *VoteTopicContext) OK(r interface{}) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *VoteTopicContext) BadRequest(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *VoteTopicContext) Unauthorized(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *VoteTopicContext) NotFound(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *VoteTopicContext) InternalServerError(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// LoginUserContext provides the user login action context.
type LoginUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Password string
	UserName string
}

// NewLoginUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller login action.
func NewLoginUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*LoginUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LoginUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPassword := req.Params["password"]
	if len(paramPassword) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("password"))
	} else {
		rawPassword := paramPassword[0]
		rctx.Password = rawPassword
	}
	paramUserName := req.Params["userName"]
	if len(paramUserName) > 0 {
		rawUserName := paramUserName[0]
		rctx.UserName = rawUserName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LoginUserContext) OK(r interface{}) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LoginUserContext) BadRequest(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LoginUserContext) Unauthorized(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *LoginUserContext) NotFound(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *LoginUserContext) InternalServerError(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// RegisterUserContext provides the user register action context.
type RegisterUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *RegisterUserPayload
}

// NewRegisterUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller register action.
func NewRegisterUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*RegisterUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RegisterUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// registerUserPayload is the user register action payload.
type registerUserPayload struct {
	// country of the user
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// username
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *registerUserPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.Country == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "country"))
	}
	return
}

// Publicize creates RegisterUserPayload from registerUserPayload
func (payload *registerUserPayload) Publicize() *RegisterUserPayload {
	var pub RegisterUserPayload
	if payload.Country != nil {
		pub.Country = *payload.Country
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	return &pub
}

// RegisterUserPayload is the user register action payload.
type RegisterUserPayload struct {
	// country of the user
	Country string `form:"country" json:"country" xml:"country"`
	// username
	Name string `form:"name" json:"name" xml:"name"`
	// password of the user
	Password string `form:"password" json:"password" xml:"password"`
}

// Validate runs the validation rules defined in the design.
func (payload *RegisterUserPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.Country == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "country"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *RegisterUserContext) OK(r interface{}) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RegisterUserContext) BadRequest(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *RegisterUserContext) Unauthorized(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RegisterUserContext) NotFound(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *RegisterUserContext) InternalServerError(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// RemoveUserContext provides the user remove action context.
type RemoveUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserName string
}

// NewRemoveUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller remove action.
func NewRemoveUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*RemoveUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RemoveUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserName := req.Params["userName"]
	if len(paramUserName) > 0 {
		rawUserName := paramUserName[0]
		rctx.UserName = rawUserName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RemoveUserContext) OK(r interface{}) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RemoveUserContext) BadRequest(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *RemoveUserContext) Unauthorized(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RemoveUserContext) NotFound(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *RemoveUserContext) InternalServerError(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
