// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "carousell-challenge": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/Coding24x7/carousell-challenge/design
// --out=$(GOPATH)/src/github.com/Coding24x7/carousell-challenge
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// CreateTopicContext provides the topic create action context.
type CreateTopicContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateTopicPayload
}

// NewCreateTopicContext parses the incoming request URL and body, performs validations and creates the
// context used by the topic controller create action.
func NewCreateTopicContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateTopicContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateTopicContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createTopicPayload is the topic create action payload.
type createTopicPayload struct {
	// Content of the topic
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// Creator of this topic
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createTopicPayload) Validate() (err error) {
	if payload.Content == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "content"))
	}
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "userID"))
	}
	return
}

// Publicize creates CreateTopicPayload from createTopicPayload
func (payload *createTopicPayload) Publicize() *CreateTopicPayload {
	var pub CreateTopicPayload
	if payload.Content != nil {
		pub.Content = *payload.Content
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// CreateTopicPayload is the topic create action payload.
type CreateTopicPayload struct {
	// Content of the topic
	Content string `form:"content" json:"content" xml:"content"`
	// Creator of this topic
	UserID string `form:"userID" json:"userID" xml:"userID"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateTopicPayload) Validate() (err error) {
	if payload.Content == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "content"))
	}
	if payload.UserID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "userID"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateTopicContext) OK(r interface{}) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateTopicContext) BadRequest(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateTopicContext) Unauthorized(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateTopicContext) NotFound(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateTopicContext) InternalServerError(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteTopicContext provides the topic delete action context.
type DeleteTopicContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TopicID string
}

// NewDeleteTopicContext parses the incoming request URL and body, performs validations and creates the
// context used by the topic controller delete action.
func NewDeleteTopicContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteTopicContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteTopicContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTopicID := req.Params["topicID"]
	if len(paramTopicID) > 0 {
		rawTopicID := paramTopicID[0]
		rctx.TopicID = rawTopicID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteTopicContext) OK(r interface{}) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteTopicContext) BadRequest(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteTopicContext) Unauthorized(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteTopicContext) NotFound(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteTopicContext) InternalServerError(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowTopicContext provides the topic show action context.
type ShowTopicContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowTopicContext parses the incoming request URL and body, performs validations and creates the
// context used by the topic controller show action.
func NewShowTopicContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowTopicContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowTopicContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowTopicContext) OK(r interface{}) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowTopicContext) BadRequest(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowTopicContext) Unauthorized(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowTopicContext) NotFound(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowTopicContext) InternalServerError(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// VoteTopicContext provides the topic vote action context.
type VoteTopicContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TopicID string
	Payload *VoteTopicPayload
}

// NewVoteTopicContext parses the incoming request URL and body, performs validations and creates the
// context used by the topic controller vote action.
func NewVoteTopicContext(ctx context.Context, r *http.Request, service *goa.Service) (*VoteTopicContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := VoteTopicContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTopicID := req.Params["topicID"]
	if len(paramTopicID) > 0 {
		rawTopicID := paramTopicID[0]
		rctx.TopicID = rawTopicID
	}
	return &rctx, err
}

// voteTopicPayload is the topic vote action payload.
type voteTopicPayload struct {
	// user id
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	// upvote/downvote topic
	Vote *string `form:"vote,omitempty" json:"vote,omitempty" xml:"vote,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *voteTopicPayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "userID"))
	}
	if payload.Vote == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "vote"))
	}
	if payload.Vote != nil {
		if !(*payload.Vote == "up" || *payload.Vote == "down") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`raw.vote`, *payload.Vote, []interface{}{"up", "down"}))
		}
	}
	return
}

// Publicize creates VoteTopicPayload from voteTopicPayload
func (payload *voteTopicPayload) Publicize() *VoteTopicPayload {
	var pub VoteTopicPayload
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	if payload.Vote != nil {
		pub.Vote = *payload.Vote
	}
	return &pub
}

// VoteTopicPayload is the topic vote action payload.
type VoteTopicPayload struct {
	// user id
	UserID string `form:"userID" json:"userID" xml:"userID"`
	// upvote/downvote topic
	Vote string `form:"vote" json:"vote" xml:"vote"`
}

// Validate runs the validation rules defined in the design.
func (payload *VoteTopicPayload) Validate() (err error) {
	if payload.UserID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "userID"))
	}
	if payload.Vote == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "vote"))
	}
	if !(payload.Vote == "up" || payload.Vote == "down") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`raw.vote`, payload.Vote, []interface{}{"up", "down"}))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *VoteTopicContext) OK(r interface{}) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *VoteTopicContext) BadRequest(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *VoteTopicContext) Unauthorized(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *VoteTopicContext) NotFound(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *VoteTopicContext) InternalServerError(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateUserContext provides the user create action context.
type CreateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateUserPayload
}

// NewCreateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller create action.
func NewCreateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createUserPayload is the user create action payload.
type createUserPayload struct {
	// country of the user
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// name of the user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createUserPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Country == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "country"))
	}
	return
}

// Publicize creates CreateUserPayload from createUserPayload
func (payload *createUserPayload) Publicize() *CreateUserPayload {
	var pub CreateUserPayload
	if payload.Country != nil {
		pub.Country = *payload.Country
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	return &pub
}

// CreateUserPayload is the user create action payload.
type CreateUserPayload struct {
	// country of the user
	Country string `form:"country" json:"country" xml:"country"`
	// name of the user
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateUserPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Country == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "country"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateUserContext) OK(r interface{}) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateUserContext) BadRequest(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateUserContext) Unauthorized(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateUserContext) NotFound(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateUserContext) InternalServerError(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetUserContext provides the user get action context.
type GetUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserName string
}

// NewGetUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get action.
func NewGetUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserName := req.Params["userName"]
	if len(paramUserName) > 0 {
		rawUserName := paramUserName[0]
		rctx.UserName = rawUserName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetUserContext) OK(r interface{}) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetUserContext) BadRequest(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetUserContext) Unauthorized(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetUserContext) NotFound(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetUserContext) InternalServerError(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// RemoveUserContext provides the user remove action context.
type RemoveUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID string
}

// NewRemoveUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller remove action.
func NewRemoveUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*RemoveUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RemoveUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RemoveUserContext) OK(r interface{}) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RemoveUserContext) BadRequest(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *RemoveUserContext) Unauthorized(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RemoveUserContext) NotFound(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *RemoveUserContext) InternalServerError(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowUserContext provides the user show action context.
type ShowUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller show action.
func NewShowUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUserContext) OK(r interface{}) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowUserContext) BadRequest(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowUserContext) Unauthorized(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowUserContext) NotFound(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowUserContext) InternalServerError(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
